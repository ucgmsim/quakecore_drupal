<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Mail\Plugin\Mail\PhpMail;
use Drupal\Core\Render\Markup;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_ENTITY_TYPE_create() for node entities.
 */
//function my_module_node_create(EntityInterface $entity) {
//  // Only act on 'Publication' content type.
//  if ($entity->bundle() === 'publication') {
//    // Set the first value of 'field_corresponding_authors' to the current user's ID if the user is not an admin.
//    $user = \Drupal::currentUser();
//   // if (!$user->hasPermission('administer users')) {
//      $corresponding_authors = $entity->get('field_corresponding_authors')->getValue();
//      if (empty($corresponding_authors)) {
//        $entity->set('field_corresponding_authors', [['target_id' => $user->id()]]);
//      }
////    }
//  }
//}

function my_module_node_create(EntityInterface $entity) {
  if ($entity->bundle() === 'publication') {
    if ($entity->hasField('field_corresponding_authors') && $entity->get('field_corresponding_authors')->isEmpty()) {
      \Drupal::logger('my_module')->error('The "Corresponding Authors" field is empty for publication ID: @id', ['@id' => $entity->id()]);
      // Ensure the field has a default author.
      $user = \Drupal::currentUser();
      $entity->set('field_corresponding_authors', [['target_id' => $user->id()]]);
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function my_module_form_node_publication_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add a custom validation callback to the publication form.
  $form['#validate'][] = 'my_module_publication_form_validate';
  // Attach the JavaScript file to the form.
  // Attach the JavaScript file to the form.
  //$form['#attached']['library'][] = 'my_module/my_module';
}

/**
 * Custom validation callback for the publication form.
 */
function my_module_publication_form_validate($form, FormStateInterface $form_state) {
  // Check if the bypass_validation query parameter is present.
  $request = \Drupal::request();
  $bypass_validation = $request->query->get('bypass_validation');

  if (!$bypass_validation) {
    // Normal validation logic when the bypass_validation parameter is not present.
    $title = $form_state->getValue('title')[0]['value'];

    // Check if the title is empty and provide error feedback.
    if (empty($title)) {
      $form_state->setErrorByName('title', t('The Title field is required.'));
      return; // Stop further validation.
    }
  
    // Check if a publication with a similar title already exists.
        $query = \Drupal::entityQuery('node')
          ->condition('type', 'publication')
          ->condition('title', '%'.$title.'%', 'LIKE');
        $query->accessCheck(FALSE); // Set access check to false if access control is not required.
  //     Add additional conditions or filters to the query.
        $existing_publication_ids = $query->execute();
  
        // If there are existing publications with similar titles, display a warning message.
        if (!empty($existing_publication_ids)) {
          $existing_publication_links = [];
          foreach ($existing_publication_ids as $existing_publication_id) {
            $existing_publication = Node::load($existing_publication_id);
            $existing_publication_title = $existing_publication->getTitle();
            $url = Url::fromRoute('entity.node.edit_form', ['node' => $existing_publication_id]);
            $existing_publication_link = Link::fromTextAndUrl(t('@title (ID: @id)', ['@title' => $existing_publication_title, '@id' => $existing_publication_id]), $url);
            $existing_publication_links[] = $existing_publication_link->toString();
          }
          $existing_publication_list = Markup::create('<ul><li>' . implode('</li><li>', $existing_publication_links) . '</li></ul>');
          $message = t('Publications with similar titles already exist. You may want to edit the following existing publications instead of creating a new one:<br>@publications<br> Alternatively, edit the title of this publication (eg. add venue, year to the end) and re-submit.', [
              '@publications' => $existing_publication_list,
          ]);
          $form_state->setErrorByName('title', $message);
        }
    
  }
}


function my_module_entity_insert(EntityInterface $entity) {
  // Only act on 'Publication' content type.
  if ($entity->bundle() === 'publication') {
}


function my_module_entity_insert(EntityInterface $entity) {
  // Only act on 'Publication' content type.
  if ($entity->bundle() === 'publication') {
    $pid = $entity->id();
    $message = t('Your Publication ID is %pid. A confirmation email will be sent shortly.', ['%pid' => $pid]);
    \Drupal::messenger()->addMessage($message);

    // Copy the entity ID to the 'field_publication_id' field.
    $entity->set('field_publication_id', $entity->id());
    $entity->save();
    
    $authors = $entity->get('field_corresponding_authors')->referencedEntities();
    $recipients = [];
    $author_names = [];
    foreach ($authors as $author) {
	    $recipients[] = $author->getEmail();
	    $author_names[] = $author->label();
    }
    $author_names_str = implode(", ",$author_names);

    $title = $entity->getTitle();

    $subject = "New Publication Added to QuakeCoRE portal (id: $pid)";
    $body = array();
    $greeting="Dear $author_names[0]";
    if (count($authors)>1) {
	    $greeting.=" (Co-author(s): ";
	    for ($i=1; $i<count($authors);$i++) {
		    $greeting.=$author_names[$i];
		    if ($i<count($authors)-1) $greeting.=", ";
	    }
	    $greeting.="),";
    }
    else $greeting.=",";

    $body[] = $greeting;
    $body[] ="";
    $body[] ="Thank you for submitting a publication to the Te Hiranga R큰 QuakeCoRE Portal";
    $body[] ="";
    $body[] ="Your QuakeCoRE publication number for your submission entitled";
    $body[] ="\"$title\" (by $author_names_str)";
    $body[] ="is $pid.";
    $body[] ="";
    $body[] ="Please add the following statement in your acknowledgement;";
    $body[] ="";
    $body[] ="This project was (partially) supported by Te Hiranga R큰 QuakeCoRE, an Aotearoa New Zealand Tertiary Education Commission-funded Centre.";
    $body[] ="This is QuakeCoRE publication number $pid.";
    $body[] ="";
    $body[] ="Ng훮 mihi,";
    $body[] ="Te Hiranga R큰 QuakeCoRE Team";
    $body[] ="quakecore@canterbury.ac.nz";

    // Send the email to multiple recipients
    $to = $recipients[0];
    unset($recipients[0]);

    $params= [
          'subject' => $subject,
          'body' => $body,
    ];

    foreach ($recipients as $recipient) {
      $params['Cc'][] = $recipient;
    }

   // Send the email
   \Drupal::service('plugin.manager.mail')->mail(
        'my_module',
        'new_publication',
        $to,
	'en',
	$params
      );

  }
}

/**
 * Implements hook_mail().
 */

function my_module_mail($key, &$message, $params) {
  switch ($key) {
    case 'new_publication':
      $message['subject'] = $params['subject'];
      $message['body'][] = implode("\n",$params['body']);
      if (isset($params['Cc'])) $message['headers']['Cc']=implode(' ',$params['Cc']);
      break;
  }
}

/**
 * Generates the email body HTML with an attached signature.
 *
 * @param array $body The email body lines.
 * @param string $signatureFilePath The path to the PNG signature file.
 *
 * @return string The generated email body HTML.
 */
function generateEmailBodyWithSignature(array $body, $signatureFilePath) {
  // Combine the email body lines
  $emailBody = implode("<br>\n", $body);

  // Add the signature image as an attachment
  $fileUri = \Drupal::service('file_system')->realpath($signatureFilePath);
  $fileContents = file_get_contents($fileUri);
  if ($fileContents !== FALSE) {
    $base64EncodedImage = base64_encode($fileContents);
    $signatureHtml = "<br>\n<img src='data:image/png;base64, $base64EncodedImage'>";
    $emailBody .= $signatureHtml;
  }

  return $emailBody;
    	if ($form_id == 'node_form' && isset($form['#node']) && $form['#node']->getType() == 'publication') {
	        $form['author']['#access'] = TRUE;
    	}
    }
}

/**
 * Implements hook_menu() to define a custom path for publication report.
 */
function my_module_menu() {
  $items['publications-report'] = array(
    'title' => 'Publications Report',
    'page callback' => 'my_module_publications_report',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Callback function for the publications report.
 */
function my_module_publications_report() {
  $build = array();

  // Load all Publication nodes sorted by publication id.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'publication')
    ->sort('field_publication_id');
  $nids = $query->execute();

  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);

  $header = array(
    'Publication ID',
    'Title',
    'Author(s)',
  );
  $rows = array();
  foreach ($nodes as $node) {
    $title = $node->getTitle();
    $nid = $node->id();
    $publication_id = $node->get('field_publication_id')->value;

    // Get the corresponding authors.
    $corresponding_authors = $node->get('field_corresponding_authors')->referencedEntities();
    $authors = array();
    foreach ($corresponding_authors as $author) {
      $authors[] = $author->get('name')->value;
    }
    $author_names = implode(', ', $authors);

    // Create a hyperlink to the node.
    $url = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
    $title = "<a href='$url'>$title</a>";

    $rows[] = array(
      'data' => array(
        $publication_id,
        $title,
        $author_names,
      ),
    );
  }

  $build['publications_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('id' => 'publications-table'),
  );

  return $build;
}

